{"version":3,"sources":["ImportFile.js","App.js","serviceWorker.js","index.js"],"names":["ImportFromFile","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","state","stats","fileReader","FileReader","handleFileChosen","bind","assertThisInitialized","handleFileRead","data","console","log","fileData","toConsumableArray","headers","filter","header","shift","pop","forEach","record","statsLine","date","points","parseFloat","historicalDownload","dailyDownload","dailyUniqueDownload","dailyTwitchAppDownload","dailyCurseForgeDownload","push","setState","e","content","currentTarget","result","Papa","parse","complete","handleData","file","onloadend","readAsText","_this$state","react_default","a","createElement","map","stat","entries","entry","_this2","type","id","className","accept","onChange","target","files","renderStats","React","Component","App","ImportFile","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"2SAkGeA,qBA5Fb,SAAAA,EAAYC,GAAO,IAAAC,EAAA,OAAAC,OAAAC,EAAA,EAAAD,CAAAE,KAAAL,IACjBE,EAAAC,OAAAG,EAAA,EAAAH,CAAAE,KAAAF,OAAAI,EAAA,EAAAJ,CAAAH,GAAAQ,KAAAH,KAAMJ,KAEDQ,MAAQ,CACXC,MAAO,MAGTR,EAAKS,WAAa,IAAIC,WAEtBV,EAAKW,iBAAmBX,EAAKW,iBAAiBC,KAAtBX,OAAAY,EAAA,EAAAZ,QAAAY,EAAA,EAAAZ,CAAAD,KACxBA,EAAKc,eAAiBd,EAAKc,eAAeF,KAApBX,OAAAY,EAAA,EAAAZ,QAAAY,EAAA,EAAAZ,CAAAD,KAVLA,0EAaRe,GACTC,QAAQC,IAAIF,GACZ,IAAMG,EAAQjB,OAAAkB,EAAA,EAAAlB,CAAOc,EAAKA,MACpBK,EAAUF,EAAS,GAAGG,OAAO,SAAAC,GAAM,MAAe,eAAXA,GAAsC,SAAXA,IACxEJ,EAASK,QACTL,EAASM,MAET,IAAMhB,EAAQ,GAEdU,EAASO,QAAQ,SAAAC,GACf,IAAMC,EAAY,CACdC,KAAMF,EAAO,GAGbG,OAAQC,WAAWJ,EAAO,IAC1BK,mBAAoBL,EAAO,GAC3BM,cAAeN,EAAO,GACtBO,oBAAqBP,EAAO,GAC5BQ,uBAAwBR,EAAO,GAC/BS,wBAAyBT,EAAO,IAEpClB,EAAM4B,KAAKT,KAGbxB,KAAKkC,SAAS,CAAC7B,QAAOY,mDAGTkB,GACb,IAEIvB,EAFEwB,EAAUD,EAAEE,cAAcC,OAGhCC,IAAKC,MAAMJ,EAAS,CAClBK,SAAU,SAACH,GAAD,OAAY1B,EAAO0B,KAE/BtC,KAAK0C,WAAW9B,4CAGD+B,GACf,IAAMrC,EAAa,IAAIC,WACvBD,EAAWsC,UAAY5C,KAAKW,eAC5BL,EAAWuC,WAAWF,yCAGV,IAAAG,EACe9C,KAAKI,MAAxBC,EADIyC,EACJzC,MAAOY,EADH6B,EACG7B,QAEf,OACE8B,EAAAC,EAAAC,cAAA,WACEF,EAAAC,EAAAC,cAAA,aACEF,EAAAC,EAAAC,cAAA,UACGhC,EAAQiC,IAAI,SAAA/B,GAAM,OAAI4B,EAAAC,EAAAC,cAAA,UAAK9B,MAE/Bd,EAAM6C,IAAI,SAACC,GAAD,OACTJ,EAAAC,EAAAC,cAAA,UACGnD,OAAOsD,QAAQD,GAAMD,IAAI,SAAAG,GAAK,OAAIN,EAAAC,EAAAC,cAAA,UAAKI,EAAM,4CAQ/C,IAAAC,EAAAtD,KACCK,EAAUL,KAAKI,MAAfC,MAER,OACE0C,EAAAC,EAAAC,cAAA,WACEF,EAAAC,EAAAC,cAAA,SAAOM,KAAK,OACVC,GAAG,OACHC,UAAU,aACVC,OAAO,OACPC,SAAU,SAAAxB,GAAC,OAAImB,EAAK9C,iBAAiB2B,EAAEyB,OAAOC,MAAM,OAErDxD,GAASL,KAAK8D,sBAxFMC,IAAMC,YCUpBC,mLARX,OACElB,EAAAC,EAAAC,cAAA,OAAKQ,UAAU,OACbV,EAAAC,EAAAC,cAACiB,EAAD,cAJUF,aCQEG,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO1B,EAAAC,EAAAC,cAACyB,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.da412e3a.chunk.js","sourcesContent":["import React from \"react\";\nimport Papa from \"papaparse\";\nimport { Line } from \"react-chartjs\"\n\nclass ImportFromFile extends React.Component {\n\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      stats: null\n    }\n\n    this.fileReader = new FileReader();\n\n    this.handleFileChosen = this.handleFileChosen.bind(this);\n    this.handleFileRead = this.handleFileRead.bind(this);\n  }\n\n  handleData(data) {\n    console.log(data);\n    const fileData = [...data.data];\n    const headers = fileData[0].filter(header => header !== \"Project ID\" && header !== \"Name\");\n    fileData.shift(); // Don't want the headers\n    fileData.pop(); // Remove mystery empty entry\n\n    const stats = [];\n\n    fileData.forEach(record => {\n      const statsLine = {\n          date: record[0],\n          // id: record[1],\n          // name: record[2],\n          points: parseFloat(record[3]),\n          historicalDownload: record[4],\n          dailyDownload: record[5],\n          dailyUniqueDownload: record[6],\n          dailyTwitchAppDownload: record[7],\n          dailyCurseForgeDownload: record[8],\n      };\n      stats.push(statsLine);\n    });\n\n    this.setState({stats, headers});\n  }\n\n  handleFileRead(e) {\n    const content = e.currentTarget.result;\n\n    let data;\n    Papa.parse(content, {\n      complete: (result) => data = result\n    });\n    this.handleData(data);\n  }\n\n  handleFileChosen(file) {\n    const fileReader = new FileReader();\n    fileReader.onloadend = this.handleFileRead;\n    fileReader.readAsText(file);\n  }\n\n  renderStats() {\n    const { stats, headers } = this.state;\n\n    return (\n      <div>\n        <table>\n          <tr>\n            {headers.map(header => <th>{header}</th>)}\n          </tr>\n        {stats.map((stat) => \n          <tr>\n            {Object.entries(stat).map(entry => <td>{entry[1]}</td>)}\n          </tr>\n        )}\n        </table>\n      </div>\n    )\n  }\n\n  render() {\n    const { stats } = this.state;\n\n    return (\n      <div>\n        <input type='file'\n          id='file'\n          className='input-file'\n          accept='.csv'\n          onChange={e => this.handleFileChosen(e.target.files[0])}\n        />\n        {stats && this.renderStats()}\n      </div>\n    );\n  }\n};\n\nexport default ImportFromFile;","import React, { Component } from 'react';\nimport './App.css';\nimport ImportFromFile from './ImportFile';\n\nclass App extends Component {\n  render() {\n    return (\n      <div className=\"App\">\n        <ImportFromFile /> \n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}