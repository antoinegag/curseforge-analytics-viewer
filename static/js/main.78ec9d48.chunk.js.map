{"version":3,"sources":["components/ImportCSV.js","components/NavBar.js","components/stats/StatTable.js","components/stats/Plots.js","App.js","utils/parseAnalytics.js","serviceWorker.js","index.js"],"names":["ImportCSV","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","state","stats","fileReader","FileReader","handleFileChosen","bind","assertThisInitialized","handleFileRead","e","data","content","currentTarget","result","Papa","parse","complete","onData","file","onloadend","readAsText","_this2","react_default","a","createElement","Input","type","id","className","accept","onChange","target","files","Label","pointing","React","Component","NavBar","Menu","style","minHeight","inverted","attached","Item","Icon","name","StatTable","_this$props","fields","Table","Header","Row","map","field","HeaderCell","Body","stat","entries","entry","Cell","Plots","title","days","values","color","react_plotly_default","useResizeHandler","x","y","mode","marker","layout","autosize","renderPlot","points","dailyDownload","dailyCurseForgeDownload","dailyTwitchAppDownload","historicalDownload","date","renderDailyPoints","renderDownloads","renderHistoricalDownload","App","handleAnalytics","setState","objectSpread","analytics","fileData","toConsumableArray","splice","shift","pop","forEach","record","statsLine","parseFloat","dailyUniqueDownload","push","parseAnalytics","_this$state","textAlign","stats_Plots","stats_StatTable","NavBar_NavBar","components_ImportCSV","renderAnalytics","Boolean","window","location","hostname","match","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.78ec9d48.chunk.js","sourcesContent":["import React from \"react\";\nimport Papa from \"papaparse\";\nimport { Input, Label } from \"semantic-ui-react\";\n\nclass ImportCSV extends React.Component {\n\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      stats: null\n    }\n\n    this.fileReader = new FileReader();\n\n    this.handleFileChosen = this.handleFileChosen.bind(this);\n    this.handleFileRead = this.handleFileRead.bind(this);\n  }\n\n  handleFileRead(e) {\n    const content = e.currentTarget.result;\n\n    let data;\n    Papa.parse(content, {\n      complete: (result) => data = result\n    });\n    this.props.onData(data);\n  }\n\n  handleFileChosen(file) {\n    const fileReader = new FileReader();\n    fileReader.onloadend = this.handleFileRead;\n    fileReader.readAsText(file);\n  }\n\n  render() {\n    return (\n      <div>\n        <Input type='file'\n          id='file'\n          className='input-file'\n          accept='.csv'\n          onChange={e => this.handleFileChosen(e.target.files[0])}\n        />\n        <Label pointing=\"left\">Choose a CSV file with CurseForge analytics data</Label>\n      </div>\n    );\n  }\n};\n\nexport default ImportCSV;","import React from 'react';\nimport {\n  Menu,\n  Icon,\n} from 'semantic-ui-react'\n\nexport default class NavBar extends React.Component {\n  render() {\n    return (\n      <Menu style={{ minHeight: \"50px\"}} inverted attached>\n        <Menu.Item><Icon name=\"pie graph\" />CurseForge Analtytics Viewer</Menu.Item>\n      </Menu>\n    );\n  }\n}","import React from \"react\";\nimport { Table } from 'semantic-ui-react'\n\nclass StatTable extends React.Component {\n\n  render() {\n    const { fields, stats } = this.props;\n\n    return (\n      <Table>\n        <Table.Header>\n          <Table.Row>\n            {fields.map(field => <Table.HeaderCell>{field}</Table.HeaderCell>)}\n          </Table.Row>\n        </Table.Header>\n        <Table.Body>\n          {stats.map((stat) => \n            <Table.Row>\n              {Object.entries(stat).map(entry => <Table.Cell>{entry[1]}</Table.Cell>)}\n            </Table.Row>\n          )}         \n        </Table.Body>\n      </Table>\n    );\n  }\n}\n\nexport default StatTable;","import React from \"react\";\nimport Plot from \"react-plotly.js\"\n\nclass Plots extends React.Component {\n  renderPlot(title, days, values, color) {\n    return (\n      <div className=\"plot-container\">\n        <Plot\n          useResizeHandler\n          data={[\n            {\n              x: days,\n              y: values,\n              type: 'scatter',\n              mode: 'lines+points',\n              marker: { color: color || 'red' },\n            },\n          ]}\n          layout={{ title: title, autosize: true }} \n        />\n      </div>\n    ); \n  }\n\n  renderDailyPoints(days) {\n    const { stats } = this.props;\n    return this.renderPlot(\"Daily points\", days, stats.map(entry => entry.points));\n  }\n\n  renderDownloads(days) {\n    const { stats } = this.props;\n\n    return (\n      <div className=\"plot-container\">\n        <Plot\n          useResizeHandler\n          data={[\n            {\n              x: days,\n              y: stats.map(entry => entry.dailyDownload),\n              name: \"Daily downloads\",\n              type: 'scatter',\n              mode: 'lines+points',\n              marker: { color: 'green' },\n            },\n            {\n              x: days,\n              y: stats.map(entry => entry.dailyCurseForgeDownload),\n              name: \"Daily CurseForge Download\",\n              type: 'scatter',\n              mode: 'lines+points',\n              marker: { color: 'orange' },\n            },\n            {\n              x: days,\n              y: stats.map(entry => entry.dailyTwitchAppDownload),\n              name: \"Daily Twitch App Download\",\n              type: 'scatter',\n              mode: 'lines+points',\n              marker: { color: 'purple' },\n            },\n          ]}\n          layout={{ title: \"Downloads\", autosize: true }} \n        />\n      </div>\n    ); \n  }\n\n  renderHistoricalDownload(days) {\n    const { stats } = this.props;\n    return this.renderPlot(\"Historical Download\", days, stats.map(entry => entry.historicalDownload), \"red\");\n  }\n\n  render() {\n    const { stats } = this.props;\n    const days = stats.map(entry => entry.date);\n\n    return (\n      <div>\n        {this.renderDailyPoints(days)}\n        {this.renderDownloads(days)}\n        {this.renderHistoricalDownload(days)}\n      </div>\n    )\n  }\n}\n\nexport default Plots;","import React, { Component } from \"react\";\nimport ImportCSV from \"./components/ImportCSV\";\nimport parseAnalytics from \"./utils/parseAnalytics\";\nimport NavBar from \"./components/NavBar\";\nimport StatTable from \"./components/stats/StatTable\";\nimport Plots from \"./components/stats/Plots\";\nimport { Header, Icon } from \"semantic-ui-react\";\n\nclass App extends Component {\n  constructor(props) {\n    super(props);\n    \n    this.state = {\n      fields: null,\n      stats: null,\n    }\n\n    this.handleAnalytics = this.handleAnalytics.bind(this);\n  }\n  \n  handleAnalytics(data) {\n    this.setState({\n      ...parseAnalytics(data.data),\n    })\n  }\n\n  renderAnalytics() {\n    const { fields, stats } = this.state;\n\n    return (\n      <div style={{textAlign: \"center\"}}>\n        <Header><Icon name=\"chart line\"/>Your stats</Header>\n        <Plots fields={fields} stats={stats}/>\n        <Header><Icon name=\"database\" />Raw data</Header>\n        <StatTable fields={fields} stats={stats}/>\n      </div>\n    )\n  }\n\n  render() {\n    const { stats } = this.state;\n\n    return (\n      <div>\n        <NavBar />\n        <ImportCSV \n          onData={this.handleAnalytics}\n        />\n        <b>Note:</b> your file is <strong>NOT</strong> uploaded to any server.\n        {stats && this.renderAnalytics()}\n      </div>\n    );\n  }\n}\n\nexport default App;\n","export default function parseAnalytics(analytics) {\n  const fileData = [...analytics];\n    const fields = fileData[0];\n    fields.splice(1, 2);\n    fileData.shift(); // Don't want the headers\n    fileData.pop(); // Remove mystery empty entry\n\n    const stats = [];\n\n    fileData.forEach(record => {\n      const statsLine = {\n          date: record[0],\n          // id: record[1],\n          // name: record[2],\n          points: parseFloat(record[3]),\n          historicalDownload: record[4],\n          dailyDownload: record[5],\n          dailyUniqueDownload: record[6],\n          dailyTwitchAppDownload: record[7],\n          dailyCurseForgeDownload: record[8],\n      };\n      stats.push(statsLine);\n    });\n\n    return {\n      fields,\n      stats\n    }\n}","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\n// import './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport \"./index.css\"\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}