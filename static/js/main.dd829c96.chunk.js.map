{"version":3,"sources":["components/ImportCSV.js","components/NavBar.js","components/stats/StatTable.js","components/stats/Plots.js","components/stats/Summary.js","App.js","utils/parseAnalytics.js","serviceWorker.js","index.js"],"names":["ImportCSV","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","state","stats","fileReader","FileReader","handleFileChosen","bind","assertThisInitialized","handleFileRead","e","data","content","currentTarget","result","Papa","parse","complete","onData","file","onloadend","readAsText","_this2","react_default","a","createElement","className","Label","pointing","target","rel","href","Input","type","id","accept","onChange","files","React","Component","NavBar","Menu","style","minHeight","inverted","attached","Item","Icon","color","name","size","position","StatTable","_this$props","fields","Table","Header","Row","map","field","HeaderCell","Body","stat","entries","entry","Cell","Plots","title","days","values","react_plotly_default","useResizeHandler","x","y","mode","marker","layout","autosize","renderPlot","points","dailyCurseForgeDownload","stackgroup","dailyTwitchAppDownload","dailyUniqueDownload","dailyDownload","historicalDownload","date","renderDailyPoints","renderDownloads","renderHistoricalDownload","Summary","_ref","project","pointSum","downloadSum","uniqueDownloadSum","curseDownloadSum","twitchDownloadSum","i","length","record","pointDailyAverage","estimatedRevenues","dailyEstimatedRevenues","growth","downloadDailyAverage","uniqueness","cursePercentage","twitchPercentage","as","Statistic","Group","Value","toLocaleString","undefined","minimumFractionDigits","maximumFractionDigits","toFixed","Popup","trigger","App","handleAnalytics","setState","objectSpread","analytics","fileData","toConsumableArray","splice","shift","pop","forEach","statsLine","parseFloat","parseInt","push","parseAnalytics","_this$state","range","start","end","marginLeft","marginRight","Content","Subheader","Divider","stats_Summary","stats_Plots","stats_StatTable","NavBar_NavBar","Container","textAlign","components_ImportCSV","renderAnalytics","Boolean","window","location","hostname","match","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"8RAmDeA,cA7Cb,SAAAA,EAAYC,GAAO,IAAAC,EAAA,OAAAC,OAAAC,EAAA,EAAAD,CAAAE,KAAAL,IACjBE,EAAAC,OAAAG,EAAA,EAAAH,CAAAE,KAAAF,OAAAI,EAAA,EAAAJ,CAAAH,GAAAQ,KAAAH,KAAMJ,KAEDQ,MAAQ,CACXC,MAAO,MAGTR,EAAKS,WAAa,IAAIC,WAEtBV,EAAKW,iBAAmBX,EAAKW,iBAAiBC,KAAtBX,OAAAY,EAAA,EAAAZ,QAAAY,EAAA,EAAAZ,CAAAD,KACxBA,EAAKc,eAAiBd,EAAKc,eAAeF,KAApBX,OAAAY,EAAA,EAAAZ,QAAAY,EAAA,EAAAZ,CAAAD,KAVLA,8EAaJe,GACb,IAEIC,EAFEC,EAAUF,EAAEG,cAAcC,OAGhCC,IAAKC,MAAMJ,EAAS,CAClBK,SAAU,SAACH,GAAD,OAAYH,EAAOG,KAE/BhB,KAAKJ,MAAMwB,OAAOP,4CAGHQ,GACf,GAAKA,EAAL,CACA,IAAMf,EAAa,IAAIC,WACvBD,EAAWgB,UAAYtB,KAAKW,eAC5BL,EAAWiB,WAAWF,qCAGf,IAAAG,EAAAxB,KACP,OACEyB,EAAAC,EAAAC,cAAA,OAAKC,UAAU,QACbH,EAAAC,EAAAC,cAACE,EAAA,EAAD,CAAOC,SAAS,SAAhB,0BAA+CL,EAAAC,EAAAC,cAAA,KAAGI,OAAO,SAASC,IAAI,sBAAsBC,KAAK,iDAAlD,wDAAiKR,EAAAC,EAAAC,cAAA,WAChNF,EAAAC,EAAAC,cAACO,EAAA,EAAD,CAAOC,KAAK,OACVC,GAAG,OACHR,UAAU,aACVS,OAAO,OACPC,SAAU,SAAA1B,GAAC,OAAIY,EAAKhB,iBAAiBI,EAAEmB,OAAOQ,MAAM,eAxCtCC,IAAMC,yCCETC,mLAEjB,OACEjB,EAAAC,EAAAC,cAACgB,EAAA,EAAD,CAAMC,MAAO,CAAEC,UAAW,QAASC,UAAQ,EAACC,UAAQ,GAClDtB,EAAAC,EAAAC,cAACgB,EAAA,EAAKK,KAAN,KAAWvB,EAAAC,EAAAC,cAACsB,EAAA,EAAD,CAAMC,MAAM,SAASC,KAAK,YAAYC,KAAK,QAAtD,gCACA3B,EAAAC,EAAAC,cAACgB,EAAA,EAAKA,KAAN,CAAWU,SAAS,SAClB5B,EAAAC,EAAAC,cAACgB,EAAA,EAAKK,KAAN,CAAWf,KAAK,qFACdR,EAAAC,EAAAC,cAACsB,EAAA,EAAD,CAAME,KAAK,UAAUC,KAAK,UAD5B,YAGA3B,EAAAC,EAAAC,cAACgB,EAAA,EAAKK,KAAN,CAAWf,KAAK,uDACdR,EAAAC,EAAAC,cAACsB,EAAA,EAAD,CAAME,KAAK,SAASC,KAAK,UAD3B,yBAT0BZ,IAAMC,oBCqB3Ba,mLAtBJ,IAAAC,EACmBvD,KAAKJ,MAAvB4D,EADDD,EACCC,OAAQnD,EADTkD,EACSlD,MAEhB,OACEoB,EAAAC,EAAAC,cAAC8B,EAAA,EAAD,KACEhC,EAAAC,EAAAC,cAAC8B,EAAA,EAAMC,OAAP,KACEjC,EAAAC,EAAAC,cAAC8B,EAAA,EAAME,IAAP,KACGH,EAAOI,IAAI,SAAAC,GAAK,OAAIpC,EAAAC,EAAAC,cAAC8B,EAAA,EAAMK,WAAP,KAAmBD,OAG5CpC,EAAAC,EAAAC,cAAC8B,EAAA,EAAMM,KAAP,KACG1D,EAAMuD,IAAI,SAACI,GAAD,OACTvC,EAAAC,EAAAC,cAAC8B,EAAA,EAAME,IAAP,KACG7D,OAAOmE,QAAQD,GAAMJ,IAAI,SAAAM,GAAK,OAAIzC,EAAAC,EAAAC,cAAC8B,EAAA,EAAMU,KAAP,KAAaD,EAAM,kBAf5C1B,IAAMC,4BC8Ff2B,qLA7FFC,EAAOC,EAAMC,EAAQrB,GAC9B,OACEzB,EAAAC,EAAAC,cAAA,OAAKC,UAAU,kBACbH,EAAAC,EAAAC,cAAC6C,EAAA9C,EAAD,CACE+C,kBAAgB,EAChB5D,KAAM,CACJ,CACE6D,EAAGJ,EACHK,EAAGJ,EACHpC,KAAM,UACNyC,KAAM,eACNC,OAAQ,CAAE3B,MAAOA,GAAS,SAG9B4B,OAAQ,CAAET,MAAOA,EAAOU,UAAU,gDAMxBT,GAAM,IACdjE,EAAUL,KAAKJ,MAAfS,MACR,OAAOL,KAAKgF,WAAW,eAAgBV,EAAMjE,EAAMuD,IAAI,SAAAM,GAAK,OAAIA,EAAMe,kDAGxDX,GAAM,IACZjE,EAAUL,KAAKJ,MAAfS,MAER,OACEoB,EAAAC,EAAAC,cAAA,OAAKC,UAAU,kBACbH,EAAAC,EAAAC,cAAC6C,EAAA9C,EAAD,CACE+C,kBAAgB,EAChB5D,KAAM,CACJ,CACE6D,EAAGJ,EACHK,EAAGtE,EAAMuD,IAAI,SAAAM,GAAK,OAAIA,EAAMgB,0BAC5B/B,KAAM,4BACNhB,KAAM,UACNyC,KAAM,eACNC,OAAQ,CAAE3B,MAAO,UACjBiC,WAAY,OAEd,CACET,EAAGJ,EACHK,EAAGtE,EAAMuD,IAAI,SAAAM,GAAK,OAAIA,EAAMkB,yBAC5BjC,KAAM,4BACNhB,KAAM,UACNyC,KAAM,eACNC,OAAQ,CAAE3B,MAAO,UACjBiC,WAAY,OAEd,CACET,EAAGJ,EACHK,EAAGtE,EAAMuD,IAAI,SAAAM,GAAK,OAAIA,EAAMmB,sBAC5BlC,KAAM,mBACNhB,KAAM,UACNyC,KAAM,eACNC,OAAQ,CAAE3B,MAAO,QAEnB,CACEwB,EAAGJ,EACHK,EAAGtE,EAAMuD,IAAI,SAAAM,GAAK,OAAIA,EAAMoB,gBAC5BnC,KAAM,kBACNhB,KAAM,UACNyC,KAAM,eACNC,OAAQ,CAAE3B,MAAO,WAGrB4B,OAAQ,CAAET,MAAO,YAAaU,UAAU,uDAMvBT,GAAM,IACrBjE,EAAUL,KAAKJ,MAAfS,MACR,OAAOL,KAAKgF,WAAW,sBAAuBV,EAAMjE,EAAMuD,IAAI,SAAAM,GAAK,OAAIA,EAAMqB,qBAAqB,wCAG3F,IAEDjB,EADYtE,KAAKJ,MAAfS,MACWuD,IAAI,SAAAM,GAAK,OAAIA,EAAMsB,OAEtC,OACE/D,EAAAC,EAAAC,cAAA,WACG3B,KAAKyF,kBAAkBnB,GACvBtE,KAAK0F,gBAAgBpB,GACrBtE,KAAK2F,yBAAyBrB,WAxFnB9B,IAAMC,wDCqHXmD,EArHC,SAAAC,GAAgCA,EAA7BC,QAA6BD,EAApBrC,OAgB1B,IAhB8C,IAAZnD,EAAYwF,EAAZxF,MAU9B0F,EAAW,EACXC,EAAc,EACdC,EAAoB,EACpBC,EAAmB,EACnBC,EAAoB,EAEfC,EAAI,EAAGA,EAAI/F,EAAMgG,OAAQD,IAAK,CACrC,IAAME,EAASjG,EAAM+F,GAErBL,GAAYO,EAAOrB,OACnBe,GAAeM,EAAOhB,cACtBW,GAAqBK,EAAOjB,oBAC5Ba,GAAoBI,EAAOpB,wBAC3BiB,GAAqBG,EAAOlB,uBAG9B,IAAMmB,EAAoBR,EAAW1F,EAAMgG,OAErCG,EADe,IACKT,EACpBU,EAFe,IAEUF,EAEzBG,EAAUV,EAAc3F,EAAM,GAAGkF,mBAAsB,IACvDoB,EAAuBX,EAAc3F,EAAMgG,OAC3CO,EAAcX,EAAoBD,EAAe,IACjDa,EAAoBX,EAAmBF,EAAe,IACtDc,EAAqBX,EAAoBH,EAAe,IAE9D,OACEvE,EAAAC,EAAAC,cAAA,WACEF,EAAAC,EAAAC,cAAA,WACEF,EAAAC,EAAAC,cAAC+B,EAAA,EAAD,CAAQqD,GAAG,MAAX,UACAtF,EAAAC,EAAAC,cAACqF,EAAA,EAAUC,MAAX,CAAiB7D,KAAK,QACpB3B,EAAAC,EAAAC,cAACqF,EAAA,EAAD,KACEvF,EAAAC,EAAAC,cAACqF,EAAA,EAAUE,MAAX,KAAkBnB,EAASoB,kBAC3B1F,EAAAC,EAAAC,cAACqF,EAAA,EAAUnF,MAAX,eAEFJ,EAAAC,EAAAC,cAACqF,EAAA,EAAD,KACEvF,EAAAC,EAAAC,cAACqF,EAAA,EAAUE,MAAX,KAAkBX,EAAkBY,oBAAeC,EA9C5C,CACfC,sBAAuB,EACvBC,sBAAuB,KA6Cf7F,EAAAC,EAAAC,cAACqF,EAAA,EAAUnF,MAAX,uBAEFJ,EAAAC,EAAAC,cAACqF,EAAA,EAAD,KACEvF,EAAAC,EAAAC,cAACqF,EAAA,EAAUE,MAAX,SAAmBV,EAAkBe,QAAQ,GAA7C,QACA9F,EAAAC,EAAAC,cAACqF,EAAA,EAAUnF,MAAX,0BAEEJ,EAAAC,EAAAC,cAAC6F,EAAA,EAAD,CACEC,QAAShG,EAAAC,EAAAC,cAACsB,EAAA,EAAD,CAAME,KAAK,oBACpBrC,QAAS,6CAIfW,EAAAC,EAAAC,cAACqF,EAAA,EAAD,KACEvF,EAAAC,EAAAC,cAACqF,EAAA,EAAUE,MAAX,SAAmBT,EAAuBc,QAAQ,GAAlD,QACA9F,EAAAC,EAAAC,cAACqF,EAAA,EAAUnF,MAAX,gCAEEJ,EAAAC,EAAAC,cAAC6F,EAAA,EAAD,CACEC,QAAShG,EAAAC,EAAAC,cAACsB,EAAA,EAAD,CAAME,KAAK,oBACpBrC,QAAS,+CAMnBW,EAAAC,EAAAC,cAAA,OAAKC,UAAU,QACbH,EAAAC,EAAAC,cAAC+B,EAAA,EAAD,CAAQqD,GAAG,MAAX,aACAtF,EAAAC,EAAAC,cAACqF,EAAA,EAAUC,MAAX,CAAiB7D,KAAK,QACpB3B,EAAAC,EAAAC,cAACqF,EAAA,EAAD,KACEvF,EAAAC,EAAAC,cAACqF,EAAA,EAAUE,MAAX,KAAkBlB,EAAYmB,kBAC9B1F,EAAAC,EAAAC,cAACqF,EAAA,EAAUnF,MAAX,KACEJ,EAAAC,EAAAC,cAACsB,EAAA,EAAD,CAAME,KAAK,aADb,UAKF1B,EAAAC,EAAAC,cAACqF,EAAA,EAAD,KACEvF,EAAAC,EAAAC,cAACqF,EAAA,EAAUE,MAAX,KAAkBP,EAAqBQ,oBAAeC,EA7E/C,CACfE,sBAAuB,KA6Ef7F,EAAAC,EAAAC,cAACqF,EAAA,EAAUnF,MAAX,uBAEFJ,EAAAC,EAAAC,cAACqF,EAAA,EAAD,KACEvF,EAAAC,EAAAC,cAACqF,EAAA,EAAUE,MAAX,KAAkBjB,EAAkBkB,kBACpC1F,EAAAC,EAAAC,cAACqF,EAAA,EAAUnF,MAAX,sBAEFJ,EAAAC,EAAAC,cAACqF,EAAA,EAAD,KACEvF,EAAAC,EAAAC,cAACqF,EAAA,EAAUE,MAAX,KAAkBN,EAAWW,QAAQ,GAArC,KACA9F,EAAAC,EAAAC,cAACqF,EAAA,EAAUnF,MAAX,oBAEFJ,EAAAC,EAAAC,cAACqF,EAAA,EAAD,KACEvF,EAAAC,EAAAC,cAACqF,EAAA,EAAUE,MAAX,KAAkBR,EAAOa,QAAQ,GAAjC,KACA9F,EAAAC,EAAAC,cAACqF,EAAA,EAAUnF,MAAX,KACEJ,EAAAC,EAAAC,cAACsB,EAAA,EAAD,CAAME,KAAK,WADb,YAMJ1B,EAAAC,EAAAC,cAACqF,EAAA,EAAUC,MAAX,CAAiB7D,KAAK,QACpB3B,EAAAC,EAAAC,cAACqF,EAAA,EAAD,CAAW9D,MAAM,UACfzB,EAAAC,EAAAC,cAACqF,EAAA,EAAUE,MAAX,KAAkBJ,EAAiBS,QAAQ,GAA3C,KACA9F,EAAAC,EAAAC,cAACqF,EAAA,EAAUnF,MAAX,uBAAgCJ,EAAAC,EAAAC,cAACsB,EAAA,EAAD,CAAME,KAAK,aAE7C1B,EAAAC,EAAAC,cAACqF,EAAA,EAAD,CAAW9D,MAAM,UACfzB,EAAAC,EAAAC,cAACqF,EAAA,EAAUE,MAAX,KAAkBL,EAAgBU,QAAQ,GAA1C,KACA9F,EAAAC,EAAAC,cAACqF,EAAA,EAAUnF,MAAX,kBAA2BJ,EAAAC,EAAAC,cAACsB,EAAA,EAAD,CAAME,KAAK,eCvCnCuE,cA/Db,SAAAA,EAAY9H,GAAO,IAAAC,EAAA,OAAAC,OAAAC,EAAA,EAAAD,CAAAE,KAAA0H,IACjB7H,EAAAC,OAAAG,EAAA,EAAAH,CAAAE,KAAAF,OAAAI,EAAA,EAAAJ,CAAA4H,GAAAvH,KAAAH,KAAMJ,KAEDQ,MAAQ,CACXoD,OAAQ,KACRnD,MAAO,MAGTR,EAAK8H,gBAAkB9H,EAAK8H,gBAAgBlH,KAArBX,OAAAY,EAAA,EAAAZ,QAAAY,EAAA,EAAAZ,CAAAD,KARNA,+EAWHgB,GACdb,KAAK4H,SAAL9H,OAAA+H,EAAA,EAAA/H,CAAA,GCtBW,SAAwBgI,GACrC,IAAMC,EAAQjI,OAAAkI,EAAA,EAAAlI,CAAOgI,GACbtE,EAASuE,EAAS,GACxBvE,EAAOyE,OAAO,EAAG,GACjBF,EAASG,QACTH,EAASI,MAET,IAAM9H,EAAQ,GACRyF,EAAU,CACd3C,KAAM4E,EAAS,GAAG,GAClB3F,GAAI2F,EAAS,GAAG,IAkBlB,OAfAA,EAASK,QAAQ,SAAA9B,GACf,IAAM+B,EAAY,CACd7C,KAAMc,EAAO,GAGbrB,OAAQqD,WAAWhC,EAAO,IAC1Bf,mBAAoBgD,SAASjC,EAAO,IACpChB,cAAeiD,SAASjC,EAAO,IAC/BjB,oBAAqBkD,SAASjC,EAAO,IACrClB,uBAAwBmD,SAASjC,EAAO,IACxCpB,wBAAyBqD,SAASjC,EAAO,KAE7CjG,EAAMmI,KAAKH,KAGN,CACLvC,UACAtC,SACAnD,SDRGoI,CAAe5H,EAAKA,kDAIT,IAAA6H,EACmB1I,KAAKI,MAAhC0F,EADQ4C,EACR5C,QAAStC,EADDkF,EACClF,OAAQnD,EADTqI,EACSrI,MACnBsI,EAAQ,CACZC,MAAOvI,EAAM,GAAGmF,KAChBqD,IAAKxI,EAAMA,EAAMgG,OAAS,GAAGb,MAE/B,OACE/D,EAAAC,EAAAC,cAAA,OAAKiB,MAAO,CAAEkG,WAAY,OAAQC,YAAa,SAC7CtH,EAAAC,EAAAC,cAAC+B,EAAA,EAAD,CAAQqD,GAAG,MACTtF,EAAAC,EAAAC,cAACsB,EAAA,EAAD,CAAME,KAAK,eACX1B,EAAAC,EAAAC,cAAC+B,EAAA,EAAOsF,QAAR,KACGlD,EAAQ3C,KACT1B,EAAAC,EAAAC,cAAC+B,EAAA,EAAOuF,UAAR,YAAuBnD,EAAQ1D,MAGnCX,EAAAC,EAAAC,cAAC+B,EAAA,EAAD,CAAQqD,GAAG,MACTtF,EAAAC,EAAAC,cAACsB,EAAA,EAAD,CAAME,KAAK,+BACVwF,EAAMC,MAFT,OAEoBD,EAAME,IAF1B,KAEiCxI,EAAMgG,OAAS,EAFhD,UAIA5E,EAAAC,EAAAC,cAACuH,EAAA,EAAD,MACAzH,EAAAC,EAAAC,cAACwH,EAAD,CAASrD,QAASA,EAAStC,OAAQA,EAAQnD,MAAOA,IAClDoB,EAAAC,EAAAC,cAACyH,EAAD,CAAO5F,OAAQA,EAAQnD,MAAOA,IAC9BoB,EAAAC,EAAAC,cAAC+B,EAAA,EAAD,CAAQqD,GAAG,MAAKtF,EAAAC,EAAAC,cAACsB,EAAA,EAAD,CAAME,KAAK,aAA3B,YACA1B,EAAAC,EAAAC,cAAC0H,EAAD,CAAW7F,OAAQA,EAAQnD,MAAOA,sCAK/B,IACCA,EAAUL,KAAKI,MAAfC,MAER,OACEoB,EAAAC,EAAAC,cAAA,WACEF,EAAAC,EAAAC,cAAC2H,EAAD,MACA7H,EAAAC,EAAAC,cAAC4H,EAAA,EAAD,CAAWC,UAAU,UACnB/H,EAAAC,EAAAC,cAAC8H,EAAD,CACErI,OAAQpB,KAAK2H,kBAEflG,EAAAC,EAAAC,cAAA,kBAJF,iBAI4BF,EAAAC,EAAAC,cAAA,qBAJ5B,4BAMCtB,GAASL,KAAK0J,0BA1DLjH,aEGEkH,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,kECXNC,IAASC,OAAOxI,EAAAC,EAAAC,cAACuI,EAAD,MAASC,SAASC,eAAe,SD0H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.dd829c96.chunk.js","sourcesContent":["import React from \"react\";\nimport Papa from \"papaparse\";\nimport { Input, Label } from \"semantic-ui-react\";\n\nclass ImportCSV extends React.Component {\n\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      stats: null\n    }\n\n    this.fileReader = new FileReader();\n\n    this.handleFileChosen = this.handleFileChosen.bind(this);\n    this.handleFileRead = this.handleFileRead.bind(this);\n  }\n\n  handleFileRead(e) {\n    const content = e.currentTarget.result;\n\n    let data;\n    Papa.parse(content, {\n      complete: (result) => data = result\n    });\n    this.props.onData(data);\n  }\n\n  handleFileChosen(file) {\n    if (!file) return;\n    const fileReader = new FileReader();\n    fileReader.onloadend = this.handleFileRead;\n    fileReader.readAsText(file);\n  }\n\n  render() {\n    return (\n      <div className=\"mt-1\">\n        <Label pointing=\"below\">Find analytics data at <a target=\"_blank\" rel=\"noopener noreferrer\" href=\"//minecraft.curseforge.com/dashboard/projects\">https://minecraft.curseforge.com/dashboard/projects</a></Label><br/>\n        <Input type='file'\n          id='file'\n          className='input-file'\n          accept='.csv'\n          onChange={e => this.handleFileChosen(e.target.files[0])}\n        />\n      </div>\n    );\n  }\n};\n\nexport default ImportCSV;","import React from 'react';\nimport {\n  Menu,\n  Icon,\n} from 'semantic-ui-react'\n\nexport default class NavBar extends React.Component {\n  render() {\n    return (\n      <Menu style={{ minHeight: \"50px\"}} inverted attached>\n        <Menu.Item><Icon color=\"orange\" name=\"pie graph\" size=\"big\" />CurseForge Analtytics Viewer</Menu.Item>\n        <Menu.Menu position='right'>\n          <Menu.Item href='//github.com/antoinegag/curseforge-analytics-viewer/blob/master/README.md#privacy'>\n            <Icon name=\"privacy\" size=\"large\"/> Privacy\n          </Menu.Item>\n          <Menu.Item href='//github.com/antoinegag/curseforge-analytics-viewer'>\n            <Icon name=\"github\" size=\"large\"/> Source Code\n          </Menu.Item>\n        </Menu.Menu>\n      </Menu>\n    );\n  }\n}","import React from \"react\";\nimport { Table } from 'semantic-ui-react'\n\nclass StatTable extends React.Component {\n\n  render() {\n    const { fields, stats } = this.props;\n\n    return (\n      <Table>\n        <Table.Header>\n          <Table.Row>\n            {fields.map(field => <Table.HeaderCell>{field}</Table.HeaderCell>)}\n          </Table.Row>\n        </Table.Header>\n        <Table.Body>\n          {stats.map((stat) => \n            <Table.Row>\n              {Object.entries(stat).map(entry => <Table.Cell>{entry[1]}</Table.Cell>)}\n            </Table.Row>\n          )}         \n        </Table.Body>\n      </Table>\n    );\n  }\n}\n\nexport default StatTable;","import React from \"react\";\nimport Plot from \"react-plotly.js\"\n\nclass Plots extends React.Component {\n  renderPlot(title, days, values, color) {\n    return (\n      <div className=\"plot-container\">\n        <Plot\n          useResizeHandler\n          data={[\n            {\n              x: days,\n              y: values,\n              type: 'scatter',\n              mode: 'lines+points',\n              marker: { color: color || 'red' },\n            },\n          ]}\n          layout={{ title: title, autosize: true }} \n        />\n      </div>\n    ); \n  }\n\n  renderDailyPoints(days) {\n    const { stats } = this.props;\n    return this.renderPlot(\"Daily points\", days, stats.map(entry => entry.points));\n  }\n\n  renderDownloads(days) {\n    const { stats } = this.props;\n\n    return (\n      <div className=\"plot-container\">\n        <Plot\n          useResizeHandler\n          data={[\n            {\n              x: days,\n              y: stats.map(entry => entry.dailyCurseForgeDownload),\n              name: \"Daily CurseForge Download\",\n              type: 'scatter',\n              mode: 'lines+points',\n              marker: { color: 'orange' },\n              stackgroup: 'one'\n            },\n            {\n              x: days,\n              y: stats.map(entry => entry.dailyTwitchAppDownload),\n              name: \"Daily Twitch App Download\",\n              type: 'scatter',\n              mode: 'lines+points',\n              marker: { color: 'purple' },\n              stackgroup: 'one'\n            },\n            {\n              x: days,\n              y: stats.map(entry => entry.dailyUniqueDownload),\n              name: \"Unique downloads\",\n              type: 'scatter',\n              mode: 'lines+points',\n              marker: { color: 'red' },\n            },\n            {\n              x: days,\n              y: stats.map(entry => entry.dailyDownload),\n              name: \"Daily downloads\",\n              type: 'scatter',\n              mode: 'lines+points',\n              marker: { color: 'green' },\n            },\n          ]}\n          layout={{ title: \"Downloads\", autosize: true }} \n        />\n      </div>\n    ); \n  }\n\n  renderHistoricalDownload(days) {\n    const { stats } = this.props;\n    return this.renderPlot(\"Historical Download\", days, stats.map(entry => entry.historicalDownload), \"red\");\n  }\n\n  render() {\n    const { stats } = this.props;\n    const days = stats.map(entry => entry.date);\n\n    return (\n      <div>\n        {this.renderDailyPoints(days)}\n        {this.renderDownloads(days)}\n        {this.renderHistoricalDownload(days)}\n      </div>\n    )\n  }\n}\n\nexport default Plots;","import React from \"react\";\nimport { Statistic, Header, Icon, Popup } from \"semantic-ui-react\";\n\nconst Summary = ({ project, fields, stats }) => {\n  const fixedTwo = {\n    minimumFractionDigits: 2,\n    maximumFractionDigits: 2\n  }\n\n  const noDigits = {\n    maximumFractionDigits: 0,\n  }\n\n  let pointSum = 0;\n  let downloadSum = 0;\n  let uniqueDownloadSum = 0;\n  let curseDownloadSum = 0;\n  let twitchDownloadSum = 0;\n\n  for (let i = 0; i < stats.length; i++) {\n    const record = stats[i];\n\n    pointSum += record.points;\n    downloadSum += record.dailyDownload;\n    uniqueDownloadSum += record.dailyUniqueDownload;\n    curseDownloadSum += record.dailyCurseForgeDownload;\n    twitchDownloadSum += record.dailyTwitchAppDownload;\n  }\n\n  const pointDailyAverage = pointSum / stats.length;\n  const PTS_USD_RATE = 0.05;\n  const estimatedRevenues = pointSum * PTS_USD_RATE;\n  const dailyEstimatedRevenues = pointDailyAverage * PTS_USD_RATE;\n\n  const growth = (downloadSum / stats[0].historicalDownload) * 100;\n  const downloadDailyAverage = downloadSum / stats.length;\n  const uniqueness = (uniqueDownloadSum / downloadSum) * 100;\n  const cursePercentage = ((curseDownloadSum / downloadSum) * 100);\n  const twitchPercentage = ((twitchDownloadSum / downloadSum) * 100);\n\n  return (\n    <div>\n      <div>\n        <Header as=\"h2\">Points</Header>\n        <Statistic.Group size=\"tiny\">\n          <Statistic>\n            <Statistic.Value>{pointSum.toLocaleString()}</Statistic.Value>\n            <Statistic.Label>Total</Statistic.Label>\n          </Statistic>\n          <Statistic>\n            <Statistic.Value>{pointDailyAverage.toLocaleString(undefined, fixedTwo)}</Statistic.Value>\n            <Statistic.Label>Daily average</Statistic.Label>\n          </Statistic>\n          <Statistic>\n            <Statistic.Value>${estimatedRevenues.toFixed(2)} USD</Statistic.Value>\n            <Statistic.Label>\n              Estimated revenues\n              <Popup\n                trigger={<Icon name=\"question circle\" />}\n                content={\"Calculated on a 1pts to $0.05 USD rate\"}\n              />\n            </Statistic.Label>\n          </Statistic>\n          <Statistic>\n            <Statistic.Value>${dailyEstimatedRevenues.toFixed(2)} USD</Statistic.Value>\n            <Statistic.Label>\n              Daily estimated revenues\n              <Popup\n                trigger={<Icon name=\"question circle\" />}\n                content={\"Calculated on a 1pts to $0.05 USD rate\"}\n              />\n            </Statistic.Label>\n          </Statistic>\n        </Statistic.Group>\n      </div>\n      <div className=\"mt-1\">\n        <Header as=\"h2\">Downloads</Header>\n        <Statistic.Group size=\"tiny\">\n          <Statistic>\n            <Statistic.Value>{downloadSum.toLocaleString()}</Statistic.Value>\n            <Statistic.Label>\n              <Icon name=\"download\" />\n              Total\n            </Statistic.Label>\n          </Statistic>\n          <Statistic>\n            <Statistic.Value>{downloadDailyAverage.toLocaleString(undefined, noDigits)}</Statistic.Value>\n            <Statistic.Label>Daily average</Statistic.Label>\n          </Statistic>\n          <Statistic>\n            <Statistic.Value>{uniqueDownloadSum.toLocaleString()}</Statistic.Value>\n            <Statistic.Label>Total unique</Statistic.Label>\n          </Statistic>\n          <Statistic>\n            <Statistic.Value>{uniqueness.toFixed(1)}%</Statistic.Value>\n            <Statistic.Label>Uniqueness</Statistic.Label>\n          </Statistic>\n          <Statistic>\n            <Statistic.Value>{growth.toFixed(1)}%</Statistic.Value>\n            <Statistic.Label>\n              <Icon name=\"rocket\"/>\n              Growth\n            </Statistic.Label>\n          </Statistic>\n        </Statistic.Group>\n        <Statistic.Group size=\"tiny\">\n          <Statistic color=\"purple\">\n            <Statistic.Value>{twitchPercentage.toFixed(1)}%</Statistic.Value>\n            <Statistic.Label>from Twitch App<Icon name=\"twitch\"/></Statistic.Label>\n          </Statistic>\n          <Statistic color=\"orange\">\n            <Statistic.Value>{cursePercentage.toFixed(1)}%</Statistic.Value>\n            <Statistic.Label>from Curse<Icon name=\"fire\"/></Statistic.Label>\n          </Statistic>\n        </Statistic.Group>\n      </div>\n    </div>\n  );\n};\n\nexport default Summary;","import React, { Component } from \"react\";\nimport ImportCSV from \"./components/ImportCSV\";\nimport parseAnalytics from \"./utils/parseAnalytics\";\nimport NavBar from \"./components/NavBar\";\nimport StatTable from \"./components/stats/StatTable\";\nimport Plots from \"./components/stats/Plots\";\nimport { Header, Icon, Container, Divider } from \"semantic-ui-react\";\nimport Summary from \"./components/stats/Summary\";\n\nclass App extends Component {\n  constructor(props) {\n    super(props);\n    \n    this.state = {\n      fields: null,\n      stats: null,\n    }\n\n    this.handleAnalytics = this.handleAnalytics.bind(this);\n  }\n  \n  handleAnalytics(data) {\n    this.setState({\n      ...parseAnalytics(data.data),\n    })\n  }\n\n  renderAnalytics() {\n    const { project, fields, stats } = this.state;\n    const range = {\n      start: stats[0].date,\n      end: stats[stats.length - 1].date,\n    }\n    return (\n      <div style={{ marginLeft: \"1rem\", marginRight: \"1rem\"}}>\n        <Header as=\"h2\">\n          <Icon name=\"chart line\"/>\n          <Header.Content>\n            {project.name}\n            <Header.Subheader>Id. {project.id}</Header.Subheader>\n          </Header.Content>\n        </Header>\n        <Header as=\"h3\">\n          <Icon name=\"calendar alternate outline\"/>\n          {range.start} to {range.end} ({stats.length - 1} days)\n        </Header>\n        <Divider />\n        <Summary project={project} fields={fields} stats={stats} />\n        <Plots fields={fields} stats={stats}/>\n        <Header as=\"h2\"><Icon name=\"database\" />Raw data</Header>\n        <StatTable fields={fields} stats={stats}/>\n      </div>\n    )\n  }\n\n  render() {\n    const { stats } = this.state;\n\n    return (\n      <div>\n        <NavBar />\n        <Container textAlign=\"center\">\n          <ImportCSV \n            onData={this.handleAnalytics}\n          />\n          <b>Note:</b> your file is <strong>NOT</strong> uploaded to any server.\n        </Container>\n        {stats && this.renderAnalytics()}\n      </div>\n    );\n  }\n}\n\nexport default App;\n","export default function parseAnalytics(analytics) {\n  const fileData = [...analytics];\n    const fields = fileData[0];\n    fields.splice(1, 2);\n    fileData.shift(); // Don't want the headers\n    fileData.pop(); // Remove mystery empty entry\n\n    const stats = [];\n    const project = {\n      name: fileData[1][2],\n      id: fileData[1][1],\n    }\n\n    fileData.forEach(record => {\n      const statsLine = {\n          date: record[0],\n          // id: record[1],\n          // name: record[2],\n          points: parseFloat(record[3]),\n          historicalDownload: parseInt(record[4]),\n          dailyDownload: parseInt(record[5]),\n          dailyUniqueDownload: parseInt(record[6]),\n          dailyTwitchAppDownload: parseInt(record[7]),\n          dailyCurseForgeDownload: parseInt(record[8]),\n      };\n      stats.push(statsLine);\n    });\n\n    return {\n      project,\n      fields,\n      stats\n    }\n}","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\n// import './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport \"./index.css\"\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}